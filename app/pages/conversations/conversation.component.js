"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var nativescript_mqtt_1 = require("nativescript-mqtt");
var application_settings_1 = require("application-settings");
var element_registry_1 = require("nativescript-angular/element-registry");
element_registry_1.registerElement("Fab", function () { return require("nativescript-floatingactionbutton").Fab; });
var restApi_service_1 = require("../../restApi.service");
var commonLib_1 = require("../../commonLib");
var Conversation = (function () {
    function Conversation(route, _router, restApi, zone) {
        this.route = route;
        this._router = _router;
        this.restApi = restApi;
        this.zone = zone;
        this.devKey = '';
        this.convos = [];
        this.newConvos = [];
        this.userDetails = [];
        this.groupFeeds = [];
        this.dispName = [];
        this.profilePic = [];
        this.groupDetails = [];
        this.token = application_settings_1.getString("userKey");
        this.mqtt_host = "apps-test.applozic.com";
        this.mqtt_port = 15677;
        this.mqtt_useSSL = true;
        this.mqtt_path = "/ws";
        this.mqtt_username = "guest";
        this.mqtt_password = "guest";
        this.mqtt_topic = this.token;
        this.options = {
            host: this.mqtt_host,
            port: this.mqtt_port,
            useSSL: this.mqtt_useSSL,
            path: this.mqtt_path
        };
        this.mqtt_client = new nativescript_mqtt_1.MQTTClient(this.options);
        this.account = {};
        this.stopCalls = false;
        this.fabTap = function (args) {
            this._router.navigate(["/startNew", this.devKey]);
            console.log('tapped');
        };
        this.timeSince = commonLib_1.getTime;
        this.setupHandlers();
    }
    Conversation.prototype.ngOnInit = function () {
        var _this = this;
        console.log("conversations onInit");
        this.devKey = this.route.snapshot.params['devKey'];
        var data = {
            devKey: this.devKey
        };
        this.restApi.convoList(data).subscribe(function (res) {
            console.log("res");
            _this.convos = res.message;
            _this.userDetails = res.userDetails;
            _this.groupFeeds = res.groupFeeds;
            commonLib_1.convoDetails(_this.userDetails, _this.groupFeeds);
            _this.dispName = commonLib_1.dispName;
            _this.profilePic = commonLib_1.profilePic;
            _this.groupDetails = commonLib_1.groupDetails;
            console.log(_this.groupFeeds.length);
            console.log(commonLib_1.groupDetails.length);
        }, function (err) {
            console.log("err");
            console.log(err);
        });
        this.connect();
    };
    Conversation.prototype.connect = function () {
        try {
            this.mqtt_client.connect(this.mqtt_username, this.mqtt_password);
            console.log("Connencting...");
        }
        catch (e) {
            console.log("Caught error IN connect: " + e);
        }
    };
    Conversation.prototype.subscribe = function () {
        try {
            this.mqtt_client.subscribe(this.mqtt_topic);
            console.log("Subscribed...");
        }
        catch (e) {
            console.log("Caught error In subscribe: " + e);
        }
    };
    Conversation.prototype.setupHandlers = function () {
        var _this = this;
        this.mqtt_client.onConnectionFailure.on(function (err) {
            console.log("Connection failed: ");
            console.dir(err);
        });
        this.mqtt_client.onConnectionSuccess.on(function () {
            console.log("Connected successfully!");
            _this.subscribe();
        });
        this.mqtt_client.onConnectionLost.on(function (err) {
            console.log("Connection lost: " + err);
        });
        this.mqtt_client.onMessageArrived.on(function (message) {
            console.log("Message received: ");
            console.log(message.payload);
            var newMessage = JSON.parse(message.payload);
            var newConvos = _this.convos;
            for (var i = 0; i < newConvos.length; i++) {
                if (newConvos[i].to == newMessage.message.to) {
                    console.dir(newConvos[i]);
                    newConvos[i] = newMessage.message;
                    _this.convos = newConvos;
                    //  delete newConvos[i];
                    //  let msg = [] ;
                    //  msg[0]  = newMessage.message;
                    //  newConvos = msg.concat(newConvos);
                    //  newConvos.push(newMessage.message);
                    console.dir(newConvos[i]);
                    //  this.convos[i] = newMessage.message;
                }
            }
        });
    };
    Conversation.prototype.chatOpen = function (user) {
        var id = "userId";
        var whose = user.to;
        if (user.groupId) {
            id = "groupId";
            whose = user.groupId;
        }
        this._router.navigate(["/chatWith", id, whose]);
    };
    Conversation.prototype.loadMoreItems = function () {
        var _this = this;
        if (this.stopCalls) {
            return;
        }
        var endTime = this.convos[this.convos.length - 1].createdAtTime;
        this.devKey = this.route.snapshot.params['devKey'];
        var that = this;
        var data = {
            devKey: this.devKey,
            endTime: endTime
        };
        console.log("Loaded");
        this.restApi.convoList(data).subscribe(function (res) {
            _this.newConvos = res.message;
            _this.userDetails = res.userDetails;
            _this.groupFeeds = res.groupFeeds;
            console.dir(_this.newConvos.length);
            that.stopCalls = (_this.newConvos.length == 0);
            commonLib_1.convoDetails(_this.userDetails, _this.groupFeeds);
            _this.dispName = commonLib_1.dispName;
            _this.profilePic = commonLib_1.profilePic;
            _this.groupDetails = commonLib_1.groupDetails;
            _this.convos = _this.convos.concat(_this.newConvos);
        }, function (err) {
            console.log("err");
            console.log(err);
        });
    };
    Conversation.prototype.logOut = function () {
        this.isTurnedOn = application_settings_1.getBoolean("isTurnedOn");
        if (this.isTurnedOn) {
            application_settings_1.setBoolean("isTurnedOn", false);
            this.account = {};
            application_settings_1.setString("account", JSON.stringify(this.account));
            this._router.navigate(["/login"]);
        }
    };
    return Conversation;
}());
Conversation = __decorate([
    core_1.Component({
        selector: "conversation",
        templateUrl: "pages/conversations/conversation.html",
        styleUrls: ["pages/conversations/conversation.css"]
    }),
    __metadata("design:paramtypes", [router_1.ActivatedRoute, router_1.Router, restApi_service_1.RestApiService, core_1.NgZone])
], Conversation);
exports.Conversation = Conversation;
//# sourceMappingURL=data:application/json;base64,