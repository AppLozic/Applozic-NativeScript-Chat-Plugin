"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var Rx_1 = require("rxjs/Rx");
require("rxjs/add/operator/do");
require("rxjs/add/operator/map");
var application_settings_1 = require("application-settings");
var commonLib_1 = require("./commonLib");
var RestApiService = (function () {
    function RestApiService(http) {
        this.http = http;
        this.auth = '';
        this.deviceKey = '';
        this.token = '';
        this.appId = '';
        this.userId = '';
        this.APP_URL = 'https://apps-test.applozic.com';
        this.account = {
            "appId": '',
            "userId": '',
            "pwd": ''
        };
    }
    RestApiService.prototype.login = function (data) {
        var headers = new http_1.Headers({ 'Accept': 'application/json', 'Content-Type': 'application/json', 'Application-Key': this.appId });
        var options = new http_1.RequestOptions({ headers: headers });
        console.log("http request for login");
        console.log(data.appId + " " + data.userId + " " + data.pwd);
        this.appId = data.appId;
        this.userId = data.userId;
        this.token = data.pwd;
        return this.http.post(this.APP_URL + '/v2/tab/initialize.page', {
            applicationId: this.appId,
            userId: this.userId,
            password: data.pwd,
            enableEncryption: true,
            displayName: '',
            contactNumber: '',
            appVersionCode: 108,
            authenticationTypeId: 1
        }, options).map(function (res) { return res.json(); });
    };
    RestApiService.prototype.convoList = function (data) {
        this.isTurnedOn = application_settings_1.getBoolean("isTurnedOn");
        if (this.isTurnedOn) {
            console.log("Account Settings moved");
            this.account = JSON.parse(application_settings_1.getString("account"));
            console.dir(this.account);
            this.appId = this.account.appId;
            this.userId = this.account.userId;
            this.token = this.account.pwd;
        }
        var enc = this.userId + ':' + data.devKey;
        this.auth = commonLib_1.Base64.encode(enc);
        this.deviceKey = data.devKey;
        var headers = new http_1.Headers({ 'Accept': 'application/json', 'Content-Type': 'application/json',
            'UserId-Enabled': true, 'Application-Key': this.appId, 'Access-Token': this.token,
            'Device-Key': this.deviceKey, 'Authorization': 'Basic ' + this.auth });
        var options = new http_1.RequestOptions({ headers: headers });
        var reqData = '';
        if (data.endTime) {
            reqData += '&endTime=' + data.endTime;
        }
        reqData += '&mainPageSize=60';
        console.log("http request for convoList");
        console.log(this.deviceKey + " " + this.auth);
        return this.http.get(this.APP_URL + '/rest/ws/message/list' + '?startIndex=0' + reqData, options)
            .map(function (res) { return res.json(); });
    };
    RestApiService.prototype.chat = function (data) {
        var headers = new http_1.Headers({ 'Accept': 'application/json', 'Content-Type': 'application/json',
            'UserId-Enabled': true, 'Application-Key': this.appId, 'Access-Token': this.token,
            'Device-Key': this.deviceKey, 'Authorization': 'Basic ' + this.auth });
        var options = new http_1.RequestOptions({ headers: headers });
        var reqData = '';
        reqData += "&" + data.id + "=" + data.whose;
        if (data.endTime) {
            reqData += '&endTime=' + data.endTime;
        }
        reqData += '&pageSize=30';
        return this.http.get(this.APP_URL + '/rest/ws/message/list' + '?startIndex=0' + reqData, options)
            .map(function (res) { return res.json(); });
    };
    RestApiService.prototype.send = function (data) {
        var headers = new http_1.Headers({ 'Accept': 'application/json', 'Content-Type': 'application/json',
            'UserId-Enabled': true, 'Application-Key': this.appId, 'Access-Token': this.token,
            'Device-Key': this.deviceKey, 'Authorization': 'Basic ' + this.auth });
        var options = new http_1.RequestOptions({ headers: headers });
        return this.http.post(this.APP_URL + '/rest/ws/message/send', {
            contentType: 0,
            // key:"sd4py",
            message: data.message,
            metadata: {},
            source: 5,
            to: data.whose,
            type: 5
        }, options).map(function (res) { return res.json(); });
    };
    RestApiService.prototype.startNew = function () {
        var headers = new http_1.Headers({ 'Accept': 'application/json', 'Content-Type': 'application/json',
            'UserId-Enabled': true, 'Application-Key': this.appId, 'Access-Token': this.token,
            'Device-Key': this.deviceKey, 'Authorization': 'Basic ' + this.auth });
        var options = new http_1.RequestOptions({ headers: headers });
        return this.http.get(this.APP_URL + '/rest/ws/user/filter?startIndex=0&pageSize=30&orderBy=1', options)
            .map(function (res) { return res.json(); });
    };
    RestApiService.prototype.createGroup = function (data) {
        var headers = new http_1.Headers({ 'Accept': 'application/json', 'Content-Type': 'application/json',
            'UserId-Enabled': true, 'Application-Key': this.appId, 'Access-Token': this.token,
            'ofUserId': data.adminId,
            'Device-Key': this.deviceKey, 'Authorization': 'Basic ' + this.auth });
        var options = new http_1.RequestOptions({ headers: headers });
        return this.http.post(this.APP_URL + '/rest/ws/group/v2/create', {
            groupName: data.groupName,
            groupMemberList: data.members,
        }, options).map(function (res) { return res.json(); });
    };
    RestApiService.prototype.deleteMessage = function (data) {
        var headers = new http_1.Headers({ 'Accept': 'application/json', 'Content-Type': 'application/json', 'key': data.key,
            'UserId-Enabled': true, 'Application-Key': this.appId, 'Access-Token': this.token,
            'Device-Key': this.deviceKey, 'Authorization': 'Basic ' + this.auth });
        var options = new http_1.RequestOptions({ headers: headers });
        return this.http.get(this.APP_URL + '/rest/ws/message/delete', options)
            .map(function (res) { return res.json(); });
    };
    RestApiService.prototype.deleteConversation = function (data) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/json',
            'UserId-Enabled': true, 'Application-Key': this.appId, 'Access-Token': this.token,
            'Device-Key': this.deviceKey, 'Authorization': 'Basic ' + this.auth });
        var reqData = '';
        reqData += "?" + data.id + "=" + data.whose;
        var options = new http_1.RequestOptions({ headers: headers });
        console.log(this.appId + " " + " " + this.token + " " + this.deviceKey + " " + this.auth);
        return this.http.get(this.APP_URL + '/rest/ws/message/delete/conversation' + reqData, options)
            .map(function (res) { return res; });
    };
    RestApiService.prototype.addMember = function (data) {
        var headers = new http_1.Headers({ 'Accept': 'application/json', 'Content-Type': 'application/json',
            'UserId-Enabled': true, 'Application-Key': this.appId, 'Access-Token': this.token,
            'ofUserId': data.adminId,
            'Device-Key': this.deviceKey, 'Authorization': 'Basic ' + this.auth });
        var options = new http_1.RequestOptions({ headers: headers });
        return this.http.post(this.APP_URL + '/rest/ws/group/add/member', {
            userId: this.userId,
            clientGroupId: data.clientGroupId
        }, options).map(function (res) { return res.json(); });
    };
    RestApiService.prototype.removeMember = function (data) {
        var headers = new http_1.Headers({ 'Accept': 'application/json', 'Content-Type': 'application/json',
            'UserId-Enabled': true, 'Application-Key': this.appId, 'Access-Token': this.token,
            'ofUserId': data.adminId,
            'Device-Key': this.deviceKey, 'Authorization': 'Basic ' + this.auth });
        var options = new http_1.RequestOptions({ headers: headers });
        return this.http.post(this.APP_URL + '/rest/ws/group/remove/member', {
            userId: this.userId,
            clientGroupId: data.clientGroupId
        }, options).map(function (res) { return res.json(); });
    };
    RestApiService.prototype.handleErrors = function (error) {
        console.log(JSON.stringify(error.json()));
        return Rx_1.Observable.throw(error);
    };
    return RestApiService;
}());
RestApiService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http])
], RestApiService);
exports.RestApiService = RestApiService;
//# sourceMappingURL=data:application/json;base64,