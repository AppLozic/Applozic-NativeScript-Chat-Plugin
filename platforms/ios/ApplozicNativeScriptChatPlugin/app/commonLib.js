"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Base64 = {
    // private property
    _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
    // public method for encoding
    encode: function (input) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;
        input = exports.Base64.utf8Encode(input);
        while (i < input.length) {
            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);
            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;
            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            }
            else if (isNaN(chr3)) {
                enc4 = 64;
            }
            output = output +
                exports.Base64._keyStr.charAt(enc1) + exports.Base64._keyStr.charAt(enc2) +
                exports.Base64._keyStr.charAt(enc3) + exports.Base64._keyStr.charAt(enc4);
        }
        return output;
    },
    // private method for UTF-8 encoding
    utf8Encode: function (string) {
        string = string.replace(/\r\n/g, "\n");
        var utfText = "";
        for (var n = 0; n < string.length; n++) {
            var c = string.charCodeAt(n);
            if (c < 128) {
                utfText += String.fromCharCode(c);
            }
            else if ((c > 127) && (c < 2048)) {
                utfText += String.fromCharCode((c >> 6) | 192);
                utfText += String.fromCharCode((c & 63) | 128);
            }
            else {
                utfText += String.fromCharCode((c >> 12) | 224);
                utfText += String.fromCharCode(((c >> 6) & 63) | 128);
                utfText += String.fromCharCode((c & 63) | 128);
            }
        }
        return utfText;
    }
};
exports.dispName = [];
exports.profilePic = [];
exports.lastSeenAtTime = [];
exports.groupDetails = [];
function convoDetails(userDetails, groupFeeds) {
    for (var i = 0; i < userDetails.length; i++) {
        if (userDetails[i].displayName)
            exports.dispName[userDetails[i].userId] = userDetails[i].displayName;
        else if (userDetails[i].email)
            exports.dispName[userDetails[i].userId] = userDetails[i].email;
        else
            exports.dispName[userDetails[i].userId] = userDetails[i].userId;
        exports.profilePic[userDetails[i].userId] = "~/images/singleUser.jpg";
        if (userDetails[i].imageLink)
            exports.profilePic[userDetails[i].userId] = userDetails[i].imageLink;
        exports.lastSeenAtTime[userDetails[i].userId] = userDetails[i].lastSeenAtTime;
    }
    console.log(groupFeeds.length);
    for (var i = 0; i < groupFeeds.length; i++)
        exports.groupDetails[groupFeeds[i].id] = groupFeeds[i];
}
exports.convoDetails = convoDetails;
function getTime(timeStamp) {
    if (timeStamp == NaN) {
        return null;
    }
    var when = new Date(timeStamp);
    var now = new Date();
    var month = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    if ((when.getFullYear() == now.getFullYear()) && (when.getMonth() == now.getMonth()) && (when.getDate() == now.getDate())) {
        var time_1 = when.getHours().toString() + ':' + when.getMinutes().toString();
        return time_1;
    }
    var time = month[when.getMonth()] + ' ' + when.getDate().toString();
    return time;
}
exports.getTime = getTime;
//# sourceMappingURL=data:application/json;base64,